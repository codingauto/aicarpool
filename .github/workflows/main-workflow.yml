name: 🚀 Main CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  # Node.js设置
  NODE_VERSION: '22'
  # Docker设置
  REGISTRY: docker.io
  IMAGE_NAME: wutongci/aicarpool
  # 数据库占位符URL（用于通过Prisma验证）
  DATABASE_URL: mysql://root:password@localhost:3306/test_db
  # 其他环境变量
  REDIS_URL: redis://localhost:6379
  JWT_SECRET: test-jwt-secret-for-ci
  ENCRYPTION_KEY: test-encryption-key-32-characters

jobs:
  # 🧪 代码质量检查和测试
  quality-check:
    name: 🧪 Code Quality & Tests
    runs-on: ubuntu-latest
    
    # 注释掉数据库服务，因为目前没有实际的数据库
    # 当有数据库时，可以取消注释
    # services:
    #   mysql:
    #     image: mysql:8.0
    #     env:
    #       MYSQL_ROOT_PASSWORD: test
    #       MYSQL_USER: test
    #       MYSQL_PASSWORD: test
    #       MYSQL_DATABASE: aicarpool_test
    #     options: >-
    #       --health-cmd="mysqladmin ping"
    #       --health-interval=10s
    #       --health-timeout=5s
    #       --health-retries=5
    #     ports:
    #       - 3306:3306
    #   
    #   redis:
    #     image: redis:7
    #     options: >-
    #       --health-cmd "redis-cli ping"
    #       --health-interval 10s
    #       --health-timeout 5s
    #       --health-retries 5
    #     ports:
    #       - 6379:6379
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔧 Generate Prisma Client
        run: |
          echo "Generating Prisma Client..."
          DATABASE_URL="${{ env.DATABASE_URL }}" npx prisma generate
        continue-on-error: true

      - name: 🔍 Run ESLint
        run: npm run lint || true
        continue-on-error: true

      - name: 🔎 Run TypeScript check
        run: npm run type-check || true
        continue-on-error: true

      - name: 🏗️ Test build process
        run: |
          DATABASE_URL="${{ env.DATABASE_URL }}" npm run build
        env:
          SKIP_ENV_VALIDATION: true
        continue-on-error: true

      - name: 📦 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: .next/
          retention-days: 7

      # 数据库测试（当前跳过）
      - name: ⏭️ Skip Database Tests
        run: |
          echo "⚠️ Skipping database tests - no database configured"
          echo "When database is available, uncomment the services section above"

      # 当有数据库时，取消注释以下测试
      # - name: 🧪 Run unit tests
      #   run: npm test
      #   continue-on-error: true
      
      # - name: 🚀 Run performance tests
      #   run: npx tsx scripts/performance-test.ts http://localhost:4000 test-key 5 50
      #   continue-on-error: true

  # 🔒 安全扫描
  security-scan:
    name: 🔒 Security Scanning
    runs-on: ubuntu-latest
    needs: quality-check
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
      
      - name: 🔍 Run npm audit
        run: npm audit --audit-level=high
        continue-on-error: true
      
      - name: 📊 Check for dependency updates
        run: npx npm-check-updates
        continue-on-error: true

  # 🐳 构建和推送Docker镜像
  docker:
    name: 🐳 Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: quality-check
    if: github.event_name != 'pull_request' || github.event.pull_request.draft == false
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 📋 Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # set latest tag for default branch
            type=raw,value=latest,enable={{is_default_branch}}
            # set develop tag for develop branch
            type=raw,value=dev,enable=${{ github.ref == format('refs/heads/{0}', 'develop') }}
            # version tags for releases
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            # short commit sha for PRs and other branches
            type=sha,prefix={{branch}}-,suffix=-{{date 'YYYYMMDDHHmmss'}},enable=${{ github.event_name == 'pull_request' }}
          labels: |
            org.opencontainers.image.title=AiCarpool
            org.opencontainers.image.description=Enterprise AI Service Carpool Management Platform
            org.opencontainers.image.vendor=CodingAuto
            org.opencontainers.image.licenses=MIT

      - name: 🏗️ Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
            NEXT_TELEMETRY_DISABLED=1

      - name: 📝 Generate Docker image summary
        if: github.event_name != 'pull_request'
        run: |
          echo "## 🐳 Docker Image Published" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Tags:**" >> $GITHUB_STEP_SUMMARY
          echo '${{ steps.meta.outputs.tags }}' | sed 's/^/- `/' | sed 's/$/`/' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Platforms:** linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 Quick Start" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "# Pull and run the latest image" >> $GITHUB_STEP_SUMMARY
          echo "docker run -d \\" >> $GITHUB_STEP_SUMMARY
          echo "  --name aicarpool \\" >> $GITHUB_STEP_SUMMARY
          echo "  -p 4000:4000 \\" >> $GITHUB_STEP_SUMMARY
          echo "  -e DATABASE_URL=\"mysql://user:pass@host:3306/aicarpool\" \\" >> $GITHUB_STEP_SUMMARY
          echo "  -e NEXTAUTH_SECRET=\"your-secret\" \\" >> $GITHUB_STEP_SUMMARY
          echo "  ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Or use docker-compose" >> $GITHUB_STEP_SUMMARY
          echo "wget https://raw.githubusercontent.com/codingauto/aicarpool/main/docker-compose.yml" >> $GITHUB_STEP_SUMMARY
          echo "docker-compose up -d" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  # 🔍 Docker镜像安全扫描
  docker-security:
    name: 🔍 Docker Security Scan
    runs-on: ubuntu-latest
    needs: docker
    if: github.event_name != 'pull_request'
    permissions:
      security-events: write
    
    steps:
      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true

      - name: 📤 Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

  # 📋 更新Docker Hub描述
  update-docker-description:
    name: 📋 Update Docker Hub Description
    runs-on: ubuntu-latest
    needs: docker
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📝 Update Docker Hub Description
        uses: peter-evans/dockerhub-description@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: ${{ env.IMAGE_NAME }}
          readme-filepath: ./README.md
        continue-on-error: true

  # 🚀 部署到Staging环境
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [quality-check, docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
      
      - name: 🚀 Deploy to Staging
        run: |
          echo "🚀 Deploying to staging environment..."
          echo "Docker image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:dev"
          # 在这里添加实际的部署命令
          # 例如: kubectl set image deployment/aicarpool aicarpool=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:dev
        continue-on-error: true

  # 🎯 部署到生产环境
  deploy-production:
    name: 🎯 Deploy to Production
    runs-on: ubuntu-latest
    needs: [quality-check, docker, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
      
      - name: 🎯 Deploy to Production
        run: |
          echo "🎯 Deploying to production environment..."
          echo "Docker image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          # 在这里添加实际的部署命令
          # 例如: kubectl set image deployment/aicarpool aicarpool=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        continue-on-error: true

  # ❤️ 健康检查
  health-check:
    name: ❤️ Post-Deployment Health Check
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: ❤️ Check Application Health
        run: |
          echo "Checking application health..."
          # 在这里添加实际的健康检查
          # curl -f https://your-app-url/api/health || exit 1
        continue-on-error: true
      
      - name: 📊 Check Metrics Endpoint
        run: |
          echo "Checking metrics endpoint..."
          # 在这里添加实际的指标检查
          # curl -f https://your-app-url/api/metrics || exit 1
        continue-on-error: true

  # 📊 工作流摘要
  workflow-summary:
    name: 📊 Workflow Summary
    runs-on: ubuntu-latest
    needs: [quality-check, security-scan, docker]
    if: always()
    
    steps:
      - name: 📊 Generate workflow summary
        run: |
          echo "## 📊 Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📝 Build Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Workflow:** ${{ github.workflow }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Run ID:** ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Run Number:** ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Job Status" >> $GITHUB_STEP_SUMMARY
          echo "- Quality Check: ${{ needs.quality-check.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Security Scan: ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Docker Build: ${{ needs.docker.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Links" >> $GITHUB_STEP_SUMMARY
          echo "- [View Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
          echo "- [View Commit](https://github.com/${{ github.repository }}/commit/${{ github.sha }})" >> $GITHUB_STEP_SUMMARY