generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  email         String        @unique
  name          String
  password      String
  avatar        String?
  role          String        @default("user")
  status        String        @default("active")
  emailVerified Boolean       @default(false)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  apiKeys       ApiKey[]
  groups        GroupMember[]
  createdGroups Group[]       @relation("GroupCreator")
  invitations   Invitation[]
  usageStats    UsageStat[]
  userQuotaUsage UserQuotaUsage[]
  inviteLinks   InviteLink[]
  ipProxyConfigs IpProxyMemberConfig[]

  @@map("users")
}

model AiService {
  id            String           @id @default(cuid())
  serviceName   String           @unique
  displayName   String
  description   String?
  baseUrl       String
  isEnabled     Boolean          @default(true)
  rateLimits    Json?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  apiKeys       ApiKey[]
  groupServices GroupAiService[]
  usageStats    UsageStat[]
  quotaConfigs  QuotaConfig[]
  quotaUsage    QuotaUsage[]
  userQuotaUsage UserQuotaUsage[]
  models        AiServiceModel[]
  edgeRoutes    EdgeServiceRoute[]

  @@map("ai_services")
}

model Group {
  id            String           @id @default(cuid())
  name          String
  description   String?
  maxMembers    Int              @default(5)
  status        String           @default("active")
  settings      Json?
  createdById   String
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  apiKeys       ApiKey[]
  aiServices    GroupAiService[]
  members       GroupMember[]
  createdBy     User             @relation("GroupCreator", fields: [createdById], references: [id], onDelete: Cascade)
  invitations   Invitation[]
  proxyBindings ProxyBinding[]
  usageStats    UsageStat[]
  quotaConfigs  QuotaConfig[]
  quotaUsage    QuotaUsage[]
  userQuotaUsage UserQuotaUsage[]
  ipProxyConfigs IpProxyConfig[]
  edgeNodeGroups EdgeNodeGroup[]
  deploymentModes DeploymentMode[]
  systemMetrics SystemMetric[]
  alertRules    AlertRule[]
  inviteLinks   InviteLink[]

  @@index([createdById], map: "groups_createdById_fkey")
  @@map("groups")
}

model GroupMember {
  id       String   @id @default(cuid())
  groupId  String
  userId   String
  role     String   @default("member")
  status   String   @default("active")
  joinedAt DateTime @default(now())
  group    Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([groupId, userId])
  @@index([userId], map: "group_members_userId_fkey")
  @@map("group_members")
}

model GroupAiService {
  id            String    @id @default(cuid())
  groupId       String
  aiServiceId   String
  isEnabled     Boolean   @default(true)
  quota         Json?
  authConfig    Json?
  proxySettings Json?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  aiService     AiService @relation(fields: [aiServiceId], references: [id], onDelete: Cascade)
  group         Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([groupId, aiServiceId])
  @@index([aiServiceId], map: "group_ai_services_aiServiceId_fkey")
  @@map("group_ai_services")
}

model Invitation {
  id        String   @id @default(cuid())
  token     String   @unique
  email     String
  groupId   String
  inviterId String
  status    String   @default("pending")
  expiresAt DateTime
  createdAt DateTime @default(now())
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  inviter   User     @relation(fields: [inviterId], references: [id], onDelete: Cascade)

  @@index([groupId], map: "invitations_groupId_fkey")
  @@index([inviterId], map: "invitations_inviterId_fkey")
  @@map("invitations")
}

model ApiKey {
  id          String    @id @default(cuid())
  key         String    @unique
  name        String
  description String?
  groupId     String
  userId      String
  aiServiceId String
  quotaLimit  BigInt?
  quotaUsed   BigInt    @default(0)
  status      String    @default("active")
  expiresAt   DateTime?
  lastUsedAt  DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  aiService   AiService @relation(fields: [aiServiceId], references: [id], onDelete: Cascade)
  group       Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([aiServiceId], map: "api_keys_aiServiceId_fkey")
  @@index([groupId], map: "api_keys_groupId_fkey")
  @@index([userId], map: "api_keys_userId_fkey")
  @@map("api_keys")
}

model ProxyResource {
  id           String         @id @default(cuid())
  type         String
  host         String
  port         Int
  username     String?
  password     String?
  location     String?
  provider     String?
  status       String         @default("active")
  lastChecked  DateTime?
  responseTime Int?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  bindings     ProxyBinding[]

  @@map("proxy_resources")
}

model ProxyBinding {
  id              String        @id @default(cuid())
  groupId         String
  proxyResourceId String
  aiServiceId     String?
  priority        Int           @default(1)
  isEnabled       Boolean       @default(true)
  createdAt       DateTime      @default(now())
  group           Group         @relation(fields: [groupId], references: [id], onDelete: Cascade)
  proxyResource   ProxyResource @relation(fields: [proxyResourceId], references: [id], onDelete: Cascade)

  @@unique([groupId, proxyResourceId])
  @@index([proxyResourceId], map: "proxy_bindings_proxyResourceId_fkey")
  @@map("proxy_bindings")
}

model UsageStat {
  id           String    @id @default(cuid())
  userId       String
  groupId      String
  aiServiceId  String
  requestType  String
  tokenCount   BigInt
  cost         Decimal   @db.Decimal(10, 6)
  requestTime  DateTime
  responseTime Int?
  status       String
  errorCode    String?
  metadata     Json?
  aiService    AiService @relation(fields: [aiServiceId], references: [id], onDelete: Cascade)
  group        Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, requestTime])
  @@index([groupId, requestTime])
  @@index([aiServiceId, requestTime])
  @@map("usage_stats")
}

model EmailLog {
  id        String   @id @default(cuid())
  to        String
  subject   String
  type      String   // invitation, welcome, alert
  status    String   @default("pending")
  attempts  Int      @default(0)
  sentAt    DateTime?
  error     String?
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("email_logs")
}

model QuotaConfig {
  id                    String  @id @default(cuid())
  groupId               String
  aiServiceId           String
  dailyTokenLimit       BigInt  @default(100000)
  monthlyTokenLimit     BigInt  @default(3000000)
  dailyCostLimit        Decimal @default(10.0) @db.Decimal(10, 2)
  monthlyCostLimit      Decimal @default(300.0) @db.Decimal(10, 2)
  warningThreshold      Int     @default(80)
  userDailyTokenLimit   BigInt?
  userMonthlyTokenLimit BigInt?
  resetTime             String  @default("00:00")
  timezone              String  @default("Asia/Shanghai")
  isEnabled             Boolean @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  group                 Group   @relation(fields: [groupId], references: [id], onDelete: Cascade)
  aiService             AiService @relation(fields: [aiServiceId], references: [id], onDelete: Cascade)

  @@unique([groupId, aiServiceId])
  @@map("quota_configs")
}

model QuotaUsage {
  id            String   @id @default(cuid())
  groupId       String
  aiServiceId   String
  dateKey       String   // YYYY-MM-DD
  monthKey      String   // YYYY-MM
  dailyTokens   BigInt   @default(0)
  monthlyTokens BigInt   @default(0)
  dailyCost     Decimal  @default(0) @db.Decimal(10, 4)
  monthlyCost   Decimal  @default(0) @db.Decimal(10, 4)
  lastResetDate DateTime @default(now())
  warningsSent  Json?    // 存储已发送的警告状态
  updatedAt     DateTime @updatedAt
  group         Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  aiService     AiService @relation(fields: [aiServiceId], references: [id], onDelete: Cascade)

  @@unique([groupId, aiServiceId])
  @@index([dateKey])
  @@index([monthKey])
  @@map("quota_usage")
}

model UserQuotaUsage {
  id            String   @id @default(cuid())
  userId        String
  groupId       String
  aiServiceId   String
  dateKey       String   // YYYY-MM-DD
  monthKey      String   // YYYY-MM
  dailyTokens   BigInt   @default(0)
  monthlyTokens BigInt   @default(0)
  dailyCost     Decimal  @default(0) @db.Decimal(10, 4)
  monthlyCost   Decimal  @default(0) @db.Decimal(10, 4)
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  group         Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  aiService     AiService @relation(fields: [aiServiceId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId, aiServiceId])
  @@index([dateKey])
  @@index([monthKey])
  @@map("user_quota_usage")
}

// AI服务模型配置表
model AiServiceModel {
  id          String  @id @default(cuid())
  aiServiceId String
  modelName   String
  displayName String
  description String?
  inputCost   Decimal @db.Decimal(12, 8)  // 每1K token的输入成本
  outputCost  Decimal @db.Decimal(12, 8)  // 每1K token的输出成本
  maxTokens   Int     @default(4096)
  isEnabled   Boolean @default(true)
  metadata    Json?   // 模型特定配置
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  aiService   AiService @relation(fields: [aiServiceId], references: [id], onDelete: Cascade)

  @@unique([aiServiceId, modelName])
  @@map("ai_service_models")
}

// IP代理配置表 - 简化版本
model IpProxyConfig {
  id            String  @id @default(cuid())
  groupId       String
  name          String
  description   String?
  proxyType     String  // http, https, socks5
  host          String
  port          Int
  username      String?
  password      String?
  location      String?
  isEnabled     Boolean @default(true)
  maxConnections Int    @default(10)
  currentConnections Int @default(0)
  trafficUsed   BigInt  @default(0) // 已使用流量(MB)
  trafficLimit  BigInt? // 流量限制(MB)，null表示无限制
  status        String  @default("active") // active, inactive, error
  lastCheckAt   DateTime?
  responseTime  Int?    // 响应时间(ms)
  errorMessage  String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  group         Group   @relation(fields: [groupId], references: [id], onDelete: Cascade)
  usageLogs     IpUsageLog[]
  memberConfigs IpProxyMemberConfig[]

  @@unique([groupId, name])
  @@map("ip_proxy_configs")
}


// IP代理使用日志表
model IpUsageLog {
  id           String   @id @default(cuid())
  proxyId      String
  userId       String?
  sessionId    String?  // 会话标识
  sourceIp     String   // 用户源IP
  targetHost   String   // 目标主机
  targetPort   Int      // 目标端口
  bytesIn      BigInt   @default(0) // 入站流量
  bytesOut     BigInt   @default(0) // 出站流量
  duration     Int      @default(0) // 连接时长(秒)
  status       String   // success, failed, timeout
  errorCode    String?  // 错误代码
  startTime    DateTime @default(now())
  endTime      DateTime?
  metadata     Json?    // 额外元数据
  proxy        IpProxyConfig @relation(fields: [proxyId], references: [id], onDelete: Cascade)

  @@index([proxyId, startTime])
  @@index([userId, startTime])
  @@map("ip_usage_logs")
}

// IP代理成员配置表
model IpProxyMemberConfig {
  id         String   @id @default(cuid())
  proxyId    String
  userId     String
  configData Json     // 代理配置数据
  syncStatus String   @default("pending") // pending, synced, failed
  lastSyncAt DateTime?
  syncError  String?  // 同步错误信息
  isEnabled  Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  proxy      IpProxyConfig @relation(fields: [proxyId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([proxyId, userId])
  @@map("ip_proxy_member_configs")
}

// 分布式边缘节点表
model EdgeNode {
  id              String  @id @default(cuid())
  nodeId          String  @unique // 节点唯一标识
  nodeName        String
  location        String  // 地理位置
  endpoint        String  // 节点访问端点
  publicKey       String  // 节点公钥用于认证
  status          String  @default("active") // active, inactive, maintenance
  capabilities    Json    // 节点能力 CPU/内存/网络
  currentLoad     Json    // 当前负载情况
  healthScore     Int     @default(100)
  lastHeartbeat   DateTime?
  version         String  @default("1.0.0")
  metadata        Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  groupBindings   EdgeNodeGroup[]
  serviceRoutes   EdgeServiceRoute[]
  metrics         EdgeNodeMetric[]

  @@map("edge_nodes")
}

// 边缘节点组关联表
model EdgeNodeGroup {
  id         String   @id @default(cuid())
  nodeId     String
  groupId    String
  priority   Int      @default(1)
  isEnabled  Boolean  @default(true)
  config     Json?    // 节点专属配置
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  node       EdgeNode @relation(fields: [nodeId], references: [id], onDelete: Cascade)
  group      Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([nodeId, groupId])
  @@map("edge_node_groups")
}

// 边缘服务路由表
model EdgeServiceRoute {
  id          String   @id @default(cuid())
  nodeId      String
  aiServiceId String
  routeConfig Json     // 路由配置
  isEnabled   Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  node        EdgeNode @relation(fields: [nodeId], references: [id], onDelete: Cascade)
  aiService   AiService @relation(fields: [aiServiceId], references: [id], onDelete: Cascade)

  @@unique([nodeId, aiServiceId])
  @@map("edge_service_routes")
}

// 边缘节点监控指标表
model EdgeNodeMetric {
  id           String   @id @default(cuid())
  nodeId       String
  metricType   String   // cpu, memory, network, requests
  value        Decimal  @db.Decimal(15, 4)
  unit         String   // percent, bytes, rps等
  timestamp    DateTime @default(now())
  metadata     Json?
  node         EdgeNode @relation(fields: [nodeId], references: [id], onDelete: Cascade)

  @@index([nodeId, metricType, timestamp])
  @@map("edge_node_metrics")
}


// 部署模式配置表
model DeploymentMode {
  id          String  @id @default(cuid())
  groupId     String
  mode        String  // centralized, distributed, hybrid
  config      Json    // 模式特定配置
  isActive    Boolean @default(false)
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  group       Group   @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([groupId, mode])
  @@map("deployment_modes")
}

// 系统监控指标表
model SystemMetric {
  id         String   @id @default(cuid())
  groupId    String?
  component  String   // api, database, proxy, edge_node
  metricName String   // response_time, error_rate, throughput
  value      Decimal  @db.Decimal(15, 4)
  unit       String
  tags       Json?    // 标签用于分组和过滤
  timestamp  DateTime @default(now())
  group      Group?   @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@index([component, metricName, timestamp])
  @@index([groupId, timestamp])
  @@map("system_metrics")
}

// 告警规则表
model AlertRule {
  id          String  @id @default(cuid())
  groupId     String?
  ruleName    String
  description String?
  condition   Json    // 告警条件
  severity    String  @default("warning") // info, warning, error, critical
  isEnabled   Boolean @default(true)
  cooldown    Int     @default(300) // 冷却时间(秒)
  actions     Json    // 告警动作配置
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  group       Group?  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  incidents   AlertIncident[]

  @@map("alert_rules")
}

// 告警事件表
model AlertIncident {
  id          String   @id @default(cuid())
  ruleId      String
  status      String   @default("active") // active, resolved, suppressed
  severity    String
  title       String
  description String
  metadata    Json?
  startTime   DateTime @default(now())
  endTime     DateTime?
  resolvedBy  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  rule        AlertRule @relation(fields: [ruleId], references: [id], onDelete: Cascade)

  @@index([status, startTime])
  @@map("alert_incidents")
}

// 邀请链接表
model InviteLink {
  id        String   @id @default(cuid())
  token     String   @unique
  name      String
  groupId   String
  creatorId String
  maxUses   Int      @default(10)
  usedCount Int      @default(0)
  status    String   @default("active") // active, inactive, expired
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  creator   User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  @@index([groupId], map: "invite_links_groupId_fkey")
  @@index([creatorId], map: "invite_links_creatorId_fkey")
  @@map("invite_links")
}
