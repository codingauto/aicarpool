generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               String             @id @default(cuid())
  email            String             @unique
  name             String
  password         String
  avatar           String?
  role             String             @default("user")
  status           String             @default("active")
  emailVerified    Boolean            @default(false)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  apiKeys          ApiKey[]
  groups           GroupMember[]
  createdGroups    Group[]            @relation("GroupCreator")
  invitations      Invitation[]
  inviteLinks      InviteLink[]
  usageStats       UsageStat[]
  userEnterprises  UserEnterprise[]
  userQuotaUsage   UserQuotaUsage[]
  departmentMembers DepartmentMember[]

  @@map("users")
}

model Group {
  id               String                   @id @default(cuid())
  name             String
  description      String?
  maxMembers       Int                      @default(5)
  status           String                   @default("active")
  settings         Json?
  createdById      String
  createdAt        DateTime                 @default(now())
  updatedAt        DateTime                 @updatedAt
  departmentId     String?
  enterpriseId     String?
  
  // v2.4 简化字段
  organizationType String                   @default("carpool_group") // carpool_group, enterprise_group
  bindingMode      String                   @default("exclusive")     // exclusive, shared
  
  alertRules              AlertRule[]
  apiKeys                 ApiKey[]
  deploymentModes         DeploymentMode[]
  edgeNodeGroups          EdgeNodeGroup[]
  accountBindings         GroupAccountBinding[]
  aiServices              GroupAiService[]
  members                 GroupMember[]
  resourceBinding         GroupResourceBinding?
  createdBy               User                     @relation("GroupCreator", fields: [createdById], references: [id], onDelete: Cascade)
  department              Department?              @relation("DepartmentGroups", fields: [departmentId], references: [id])
  enterprise              Enterprise?              @relation(fields: [enterpriseId], references: [id])
  invitations             Invitation[]
  inviteLinks             InviteLink[]
  modelConfigurations     ModelConfiguration[]
  modelFailoverLogs       ModelFailoverLog[]
  modelPerformanceMetrics ModelPerformanceMetric[]
  proxyBindings           ProxyBinding[]
  quotaConfigs            QuotaConfig[]
  quotaUsage              QuotaUsage[]
  systemMetrics           SystemMetric[]
  usageStats              UsageStat[]
  userQuotaUsage          UserQuotaUsage[]

  @@index([createdById], map: "groups_createdById_fkey")
  @@index([enterpriseId])
  @@index([departmentId])
  @@index([organizationType])
  @@map("groups")
}

model GroupMember {
  id       String   @id @default(cuid())
  groupId  String
  userId   String
  role     String   @default("member")
  status   String   @default("active")
  joinedAt DateTime @default(now())
  group    Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([groupId, userId])
  @@index([userId], map: "group_members_userId_fkey")
  @@map("group_members")
}

model GroupAiService {
  id            String            @id @default(cuid())
  groupId       String
  aiServiceId   String
  isEnabled     Boolean           @default(true)
  quota         Json?
  authConfig    Json?
  proxySettings Json?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  accountId     String?
  account       AiServiceAccount? @relation(fields: [accountId], references: [id])
  group         Group             @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([groupId, aiServiceId])
  @@index([accountId])
  @@map("group_ai_services")
}

model Invitation {
  id        String   @id @default(cuid())
  token     String   @unique
  email     String
  groupId   String
  inviterId String
  status    String   @default("pending")
  expiresAt DateTime
  createdAt DateTime @default(now())
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  inviter   User     @relation(fields: [inviterId], references: [id], onDelete: Cascade)

  @@index([groupId], map: "invitations_groupId_fkey")
  @@index([inviterId], map: "invitations_inviterId_fkey")
  @@map("invitations")
}

model ApiKey {
  id          String    @id @default(cuid())
  key         String    @unique
  name        String
  description String?
  tags        Json?     // 标签数组
  groupId     String
  userId      String
  
  // 限制配置
  tokenLimit        Int?     // Token限制
  rateLimitWindow   Int?     // 速率限制时间窗口(分钟)
  rateLimitRequests Int?     // 速率限制请求数
  concurrencyLimit  Int      @default(0)  // 并发限制
  dailyCostLimit    Decimal  @db.Decimal(10, 2) @default(0)  // 每日费用限制
  
  // 过期设置
  expiresAt   DateTime?
  lastUsedAt  DateTime?
  
  // 权限配置
  permissions      String    @default("all")  // all, claude, gemini
  claudeAccountId  String?   // Claude账号ID
  geminiAccountId  String?   // Gemini账号ID
  
  // 高级限制
  enableModelRestriction Boolean @default(false)  // 是否启用模型限制
  restrictedModels      Json?   // 限制的模型列表
  enableClientRestriction Boolean @default(false)  // 是否启用客户端限制
  allowedClients        Json?   // 允许的客户端列表
  
  // 使用统计
  totalRequests BigInt  @default(0)
  totalTokens   BigInt  @default(0)
  totalCost     Decimal @db.Decimal(10, 6) @default(0)
  
  // 状态
  status      String    @default("active")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // 关联关系
  group       Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([groupId], map: "api_keys_groupId_fkey")
  @@index([userId], map: "api_keys_userId_fkey")
  @@map("api_keys")
}

model ProxyResource {
  id           String         @id @default(cuid())
  type         String
  host         String
  port         Int
  username     String?
  password     String?
  location     String?
  provider     String?
  status       String         @default("active")
  lastChecked  DateTime?
  responseTime Int?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  bindings     ProxyBinding[]

  @@map("proxy_resources")
}

model ProxyBinding {
  id              String        @id @default(cuid())
  groupId         String
  proxyResourceId String
  aiServiceId     String?
  priority        Int           @default(1)
  isEnabled       Boolean       @default(true)
  createdAt       DateTime      @default(now())
  group           Group         @relation(fields: [groupId], references: [id], onDelete: Cascade)
  proxyResource   ProxyResource @relation(fields: [proxyResourceId], references: [id], onDelete: Cascade)

  @@unique([groupId, proxyResourceId])
  @@index([proxyResourceId], map: "proxy_bindings_proxyResourceId_fkey")
  @@map("proxy_bindings")
}

model UsageStat {
  id             String            @id @default(cuid())
  userId         String
  groupId        String
  aiServiceId    String
  requestType    String
  cost           Decimal           @db.Decimal(10, 6)
  requestTime    DateTime
  responseTime   Int?
  status         String
  errorCode      String?
  metadata       Json?
  accountId      String?
  departmentId   String?
  enterpriseId   String?
  requestTokens  Int               @default(0)
  responseTokens Int               @default(0)
  totalTokens    BigInt
  account        AiServiceAccount? @relation(fields: [accountId], references: [id])
  group          Group             @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user           User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, requestTime])
  @@index([groupId, requestTime])
  @@index([accountId, requestTime])
  @@index([aiServiceId, requestTime])
  @@index([enterpriseId, requestTime])
  @@index([departmentId, requestTime])
  @@map("usage_stats")
}

model EmailLog {
  id        String    @id @default(cuid())
  to        String
  subject   String
  type      String
  status    String    @default("pending")
  attempts  Int       @default(0)
  sentAt    DateTime?
  error     String?
  metadata  Json?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("email_logs")
}

model QuotaConfig {
  id                    String   @id @default(cuid())
  groupId               String
  aiServiceId           String
  dailyTokenLimit       BigInt   @default(100000)
  monthlyTokenLimit     BigInt   @default(3000000)
  dailyCostLimit        Decimal  @default(10.00) @db.Decimal(10, 2)
  monthlyCostLimit      Decimal  @default(300.00) @db.Decimal(10, 2)
  warningThreshold      Int      @default(80)
  userDailyTokenLimit   BigInt?
  userMonthlyTokenLimit BigInt?
  resetTime             String   @default("00:00")
  timezone              String   @default("Asia/Shanghai")
  isEnabled             Boolean  @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  group                 Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([groupId, aiServiceId])
  @@map("quota_configs")
}

model QuotaUsage {
  id            String   @id @default(cuid())
  groupId       String
  aiServiceId   String
  dateKey       String
  monthKey      String
  dailyTokens   BigInt   @default(0)
  monthlyTokens BigInt   @default(0)
  dailyCost     Decimal  @default(0.0000) @db.Decimal(10, 4)
  monthlyCost   Decimal  @default(0.0000) @db.Decimal(10, 4)
  lastResetDate DateTime @default(now())
  warningsSent  Json?
  updatedAt     DateTime @updatedAt
  group         Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([groupId, aiServiceId])
  @@index([dateKey])
  @@index([monthKey])
  @@map("quota_usage")
}

model UserQuotaUsage {
  id            String   @id @default(cuid())
  userId        String
  groupId       String
  aiServiceId   String
  dateKey       String
  monthKey      String
  dailyTokens   BigInt   @default(0)
  monthlyTokens BigInt   @default(0)
  dailyCost     Decimal  @default(0.0000) @db.Decimal(10, 4)
  monthlyCost   Decimal  @default(0.0000) @db.Decimal(10, 4)
  updatedAt     DateTime @updatedAt
  group         Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId, aiServiceId])
  @@index([dateKey])
  @@index([monthKey])
  @@index([groupId], map: "user_quota_usage_groupId_fkey")
  @@map("user_quota_usage")
}

model AiServiceAccount {
  /// 账户唯一标识
  id                    String    @id @default(cuid())
  /// 所属企业ID
  enterpriseId          String
  
  // === 基本信息 ===
  /// 账户名称
  name                  String
  /// 账户描述
  description           String?
  /// 账户类型：shared=共享账户, dedicated=专属账户
  accountType           String    @default("shared")
  /// 账户优先级 (1-100，数值越高优先级越高)
  priority              Int       @default(50)
  
  // === 平台信息 ===
  /// AI平台类型：claude=Claude AI, gemini=Google Gemini, claude_console=Claude Console
  platform              String
  /// 认证类型：oauth=OAuth认证, manual=手动Token, api_key=API密钥
  authType              String
  
  // === OAuth认证信息 ===
  /// OAuth访问令牌（加密存储）
  oauthAccessToken      String?   @db.Text
  /// OAuth刷新令牌（加密存储）
  oauthRefreshToken     String?   @db.Text
  /// OAuth令牌过期时间
  oauthExpiresAt        DateTime?
  /// OAuth授权范围
  oauthScopes           String?
  
  // === 手动Token信息 ===
  /// 手动输入的访问令牌（加密存储）
  manualAccessToken     String?   @db.Text
  /// 手动输入的刷新令牌（加密存储）
  manualRefreshToken    String?   @db.Text
  
  // === Claude Console特定配置 ===
  /// Claude Console API URL
  claudeConsoleApiUrl           String?
  /// Claude Console API Key（加密存储）
  claudeConsoleApiKey           String?   @db.Text
  /// Claude Console用户代理字符串
  claudeConsoleUserAgent        String?
  /// Claude Console速率限制时长（秒）
  claudeConsoleRateLimitDuration Int?     @default(60)
  /// Claude Console支持的模型列表
  claudeConsoleSupportedModels  Json?
  
  // === Gemini特定配置 ===
  /// Google Cloud项目ID
  geminiProjectId       String?
  /// Gemini服务区域
  geminiLocation        String?   @default("us-central1")
  
  // === 代理配置 ===
  /// 是否启用代理
  proxyEnabled          Boolean   @default(false)
  /// 代理类型：socks5, http, https
  proxyType             String?
  /// 代理主机地址
  proxyHost             String?
  /// 代理端口号
  proxyPort             Int?
  /// 代理是否需要认证
  proxyAuthEnabled      Boolean   @default(false)
  /// 代理用户名
  proxyUsername         String?
  /// 代理密码（加密存储）
  proxyPassword         String?   @db.Text
  
  // === 状态管理 ===
  /// 账户是否启用
  isEnabled             Boolean   @default(true)
  /// 账户状态：active=活跃, inactive=非活跃, error=错误, validating=验证中
  status                String    @default("active")
  /// 验证状态：pending=待验证, valid=有效, invalid=无效, expired=已过期
  validationStatus      String    @default("pending")
  /// 验证状态说明信息
  validationMessage     String?   @db.Text
  /// 最后的错误信息
  errorMessage          String?   @db.Text
  
  // === 使用统计 ===
  /// 总请求数
  totalRequests         BigInt    @default(0)
  /// 总Token数
  totalTokens           BigInt    @default(0)
  /// 总费用
  totalCost             Decimal   @default(0) @db.Decimal(12, 4)
  /// 当前负载
  currentLoad           Int       @default(0)
  /// 最后使用时间
  lastUsedAt            DateTime?
  
  // === 限制配置 ===
  /// 日请求限制
  dailyLimit            Int       @default(10000)
  /// 每Token费用
  costPerToken          Decimal   @default(0.00001) @db.Decimal(10, 8)
  /// 请求超时时间（毫秒）
  timeoutMs             Int       @default(30000)
  
  // === 审计字段 ===
  /// 创建者用户ID
  createdBy             String
  /// 创建时间
  createdAt             DateTime  @default(now())
  /// 更新时间
  updatedAt             DateTime  @updatedAt
  
  // === 关联关系 ===
  healthChecks         AccountHealthCheck[]
  enterprise           Enterprise            @relation(fields: [enterpriseId], references: [id], onDelete: Cascade)
  groupBindings        GroupAccountBinding[]
  groupAiServices      GroupAiService[]
  usageStats           UsageStat[]

  // === 索引优化 ===
  @@index([enterpriseId, platform], map: "idx_enterprise_platform")
  @@index([status, isEnabled], map: "idx_status_enabled")
  @@index([validationStatus], map: "idx_validation_status")
  @@index([lastUsedAt], map: "idx_last_used")
  @@index([priority], map: "idx_priority")
  @@index([enterpriseId, platform, status], map: "idx_enterprise_platform_status")
  @@map("ai_service_accounts")
}

model EdgeNode {
  id            String             @id @default(cuid())
  nodeId        String             @unique
  nodeName      String
  location      String
  endpoint      String
  publicKey     String
  status        String             @default("active")
  capabilities  Json
  currentLoad   Json
  healthScore   Int                @default(100)
  lastHeartbeat DateTime?
  version       String             @default("1.0.0")
  metadata      Json?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  groupBindings EdgeNodeGroup[]
  metrics       EdgeNodeMetric[]
  serviceRoutes EdgeServiceRoute[]

  @@map("edge_nodes")
}

model EdgeNodeGroup {
  id        String   @id @default(cuid())
  nodeId    String
  groupId   String
  priority  Int      @default(1)
  isEnabled Boolean  @default(true)
  config    Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  node      EdgeNode @relation(fields: [nodeId], references: [id], onDelete: Cascade)

  @@unique([nodeId, groupId])
  @@index([groupId], map: "edge_node_groups_groupId_fkey")
  @@map("edge_node_groups")
}

model EdgeServiceRoute {
  id          String   @id @default(cuid())
  nodeId      String
  aiServiceId String
  routeConfig Json
  isEnabled   Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  node        EdgeNode @relation(fields: [nodeId], references: [id], onDelete: Cascade)

  @@unique([nodeId, aiServiceId])
  @@map("edge_service_routes")
}

model EdgeNodeMetric {
  id         String   @id @default(cuid())
  nodeId     String
  metricType String
  value      Decimal  @db.Decimal(15, 4)
  unit       String
  timestamp  DateTime @default(now())
  metadata   Json?
  node       EdgeNode @relation(fields: [nodeId], references: [id], onDelete: Cascade)

  @@index([nodeId, metricType, timestamp])
  @@map("edge_node_metrics")
}

model DeploymentMode {
  id          String   @id @default(cuid())
  groupId     String
  mode        String
  config      Json
  isActive    Boolean  @default(false)
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  group       Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([groupId, mode])
  @@map("deployment_modes")
}

model SystemMetric {
  id         String   @id @default(cuid())
  groupId    String?
  component  String
  metricName String
  value      Decimal  @db.Decimal(15, 4)
  unit       String
  tags       Json?
  timestamp  DateTime @default(now())
  group      Group?   @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@index([component, metricName, timestamp])
  @@index([groupId, timestamp])
  @@map("system_metrics")
}

model AlertRule {
  id          String          @id @default(cuid())
  groupId     String?
  ruleName    String
  description String?
  condition   Json
  severity    String          @default("warning")
  isEnabled   Boolean         @default(true)
  cooldown    Int             @default(300)
  actions     Json
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  incidents   AlertIncident[]
  group       Group?          @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@index([groupId], map: "alert_rules_groupId_fkey")
  @@map("alert_rules")
}

model AlertIncident {
  id          String    @id @default(cuid())
  ruleId      String
  status      String    @default("active")
  severity    String
  title       String
  description String
  metadata    Json?
  startTime   DateTime  @default(now())
  endTime     DateTime?
  resolvedBy  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  rule        AlertRule @relation(fields: [ruleId], references: [id], onDelete: Cascade)

  @@index([status, startTime])
  @@index([ruleId], map: "alert_incidents_ruleId_fkey")
  @@map("alert_incidents")
}

model InviteLink {
  id        String   @id @default(cuid())
  token     String   @unique
  name      String
  groupId   String
  creatorId String
  maxUses   Int      @default(10)
  usedCount Int      @default(0)
  status    String   @default("active")
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  creator   User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@index([groupId], map: "invite_links_groupId_fkey")
  @@index([creatorId], map: "invite_links_creatorId_fkey")
  @@map("invite_links")
}

model ModelConfiguration {
  id                   String   @id @default(cuid())
  groupId              String
  serviceType          String   @default("claude_code")
  primaryModel         String   @default("claude-4-sonnet")
  fallbackModels       Json
  failoverTrigger      String   @default("automatic")
  healthCheckThreshold Int      @default(80)
  failbackEnabled      Boolean  @default(true)
  strategy             String   @default("priority")
  maxRetries           Int      @default(3)
  timeout              Int      @default(30000)
  healthCheckInterval  Int      @default(60000)
  isEnabled            Boolean  @default(true)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  group                Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([groupId, serviceType])
  @@map("model_configurations")
}

model ModelFailoverLog {
  id           String   @id @default(cuid())
  groupId      String
  fromModel    String
  toModel      String
  reason       String
  success      Boolean
  responseTime Int?
  errorMsg     String?
  timestamp    DateTime @default(now())
  metadata     Json?
  group        Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@index([groupId, timestamp])
  @@index([fromModel, toModel])
  @@map("model_failover_logs")
}

model ModelPerformanceMetric {
  id          String   @id @default(cuid())
  groupId     String
  modelId     String
  metricType  String
  value       Decimal  @db.Decimal(15, 4)
  unit        String
  windowStart DateTime
  windowEnd   DateTime
  sampleCount Int      @default(1)
  tags        Json?
  createdAt   DateTime @default(now())
  group       Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@index([groupId, modelId, metricType, windowStart])
  @@index([windowStart, windowEnd])
  @@map("model_performance_metrics")
}

model Enterprise {
  id                 String              @id @default(cuid())
  name               String
  planType           String              @default("basic")
  organizationType   String              @default("enterprise")
  creationTemplate   String?
  uiTheme            String              @default("professional")
  featureSet         Json?
  settings           Json?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  aiAccounts         AiServiceAccount[]
  departments        Department[]
  enterpriseSettings EnterpriseSettings?
  groups             Group[]
  userEnterprises    UserEnterprise[]

  @@map("enterprises")
}

model UserEnterprise {
  id           String     @id @default(cuid())
  userId       String
  enterpriseId String
  role         String     @default("member")
  permissions  Json?
  joinedAt     DateTime   @default(now())
  lastAccessed DateTime   @default(now())
  isActive     Boolean    @default(true)
  enterprise   Enterprise @relation(fields: [enterpriseId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, enterpriseId])
  @@index([userId])
  @@index([enterpriseId])
  @@index([lastAccessed])
  @@map("user_enterprises")
}

model EnterpriseSettings {
  id             String     @id @default(cuid())
  enterpriseId   String     @unique
  theme          Json?
  features       Json
  security       Json
  integrations   Json
  notifications  Json
  budgetSettings Json
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  enterprise     Enterprise @relation(fields: [enterpriseId], references: [id], onDelete: Cascade)

  @@map("enterprise_settings")
}

model Department {
  id           String       @id @default(cuid())
  enterpriseId String
  parentId     String?
  name         String
  description  String?
  budgetLimit  Decimal?     @db.Decimal(10, 2)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  enterprise   Enterprise   @relation(fields: [enterpriseId], references: [id], onDelete: Cascade)
  parent       Department?  @relation("DepartmentHierarchy", fields: [parentId], references: [id])
  children     Department[] @relation("DepartmentHierarchy")
  groups       Group[]      @relation("DepartmentGroups")
  members      DepartmentMember[]

  @@index([enterpriseId])
  @@index([parentId], map: "departments_parentId_fkey")
  @@map("departments")
}

model DepartmentMember {
  id           String     @id @default(cuid())
  departmentId String
  userId       String
  role         String     @default("member") // 'member', 'admin', 'owner'
  status       String     @default("active") // 'active', 'pending', 'inactive'
  joinedAt     DateTime   @default(now())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  
  department   Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([departmentId, userId])
  @@index([departmentId])
  @@index([userId])
  @@map("department_members")
}




model GroupResourceBinding {
  id               String   @id @default(cuid())
  groupId          String   @unique
  bindingMode      String
  bindingConfig    Json
  dailyTokenLimit  Int      @default(10000)
  monthlyBudget    Decimal? @db.Decimal(10, 2)
  priorityLevel    String   @default("medium")
  warningThreshold Int      @default(80)
  alertThreshold   Int      @default(95)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  group            Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@map("group_resource_bindings")
}

model GroupAccountBinding {
  id            String           @id @default(cuid())
  groupId       String
  accountId     String
  bindingType   String           @default("exclusive") // v2.4: exclusive, shared
  dailyLimit    Int?             // v2.4: 日使用限制  
  monthlyBudget Decimal?         @db.Decimal(10, 2) // v2.4: 月预算限制
  isActive      Boolean          @default(true)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt // v2.4: 添加更新时间
  account       AiServiceAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)
  group         Group            @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([groupId, accountId])
  @@index([accountId])
  @@index([bindingType])
  @@map("group_account_bindings")
}

model AccountHealthCheck {
  id           String           @id @default(cuid())
  accountId    String
  isHealthy    Boolean
  responseTime Int?
  errorMessage String?
  checkedAt    DateTime         @default(now())
  account      AiServiceAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@index([accountId, checkedAt])
  @@map("account_health_checks")
}

model BudgetAllocation {
  id           String   @id @default(cuid())
  entityType   String
  entityId     String
  budgetPeriod String   @default("monthly")
  budgetAmount Decimal  @db.Decimal(10, 2)
  usedAmount   Decimal  @default(0.00) @db.Decimal(10, 2)
  periodStart  DateTime
  periodEnd    DateTime
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([entityType, entityId])
  @@index([budgetPeriod, periodStart])
  @@map("budget_allocations")
}

model UserEnterpriseRole {
  id           String   @id @default(cuid())
  userId       String
  enterpriseId String?
  role         String   // 简化：直接存储角色名称，不使用外键
  scope        String   @default("enterprise") // 'global', 'enterprise', 'group'
  resourceId   String?  // 具体资源ID（如groupId）
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId])
  @@index([enterpriseId])
  @@index([role, scope])
  @@index([userId, enterpriseId])
  @@map("user_enterprise_roles")
}

// 移除EnterpriseRole和RolePermission表
// 简化设计：权限直接在代码中定义，不存储在数据库中

enum AuthType {
  api_key
  oauth
  session_token
  access_key
  bearer_token
  app_key
  project_key
}

// OAuth会话模型 - 存储临时的OAuth认证会话
model OAuthSession {
  id            String    @id @default(cuid())
  platform      String    // claude, gemini等
  codeVerifier  String    @db.Text
  state         String
  codeChallenge String
  proxy         String?   @db.Text // JSON格式的代理配置
  enterpriseId  String
  userId        String
  expiresAt     DateTime
  createdAt     DateTime  @default(now())
  
  @@map("oauth_sessions")
}

enum ServiceType {
  claude
  claude_console  
  openai
  gemini
  qwen           // 通义千问
  glm            // 智谱AI
  kimi           // 月之暗面
  wenxin         // 文心一言
  spark          // 讯飞星火
  hunyuan        // 腾讯混元
  minimax        // MiniMax
  baichuan       // 百川AI
  sensetime      // 商汤
  doubao         // 豆包
}
