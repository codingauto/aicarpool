generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  email         String        @unique
  name          String
  password      String
  avatar        String?
  role          String        @default("user")
  status        String        @default("active")
  emailVerified Boolean       @default(false)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  apiKeys       ApiKey[]
  groups        GroupMember[]
  createdGroups Group[]       @relation("GroupCreator")
  invitations   Invitation[]
  usageStats    UsageStat[]
  userQuotaUsage UserQuotaUsage[]
  inviteLinks   InviteLink[]
  enhancedUsageStats EnhancedUsageStat[]  // 增强使用统计

  @@map("users")
}


model Group {
  id            String           @id @default(cuid())
  name          String
  description   String?
  maxMembers    Int              @default(5)
  status        String           @default("active")
  settings      Json?
  createdById   String
  departmentId  String?          // 所属部门ID（企业级功能）
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  apiKeys       ApiKey[]
  aiServices    GroupAiService[]
  aiServiceAccounts AiServiceAccount[]
  members       GroupMember[]
  createdBy     User             @relation("GroupCreator", fields: [createdById], references: [id], onDelete: Cascade)
  department    Department?      @relation("DepartmentGroups", fields: [departmentId], references: [id])
  invitations   Invitation[]
  proxyBindings ProxyBinding[]
  usageStats    UsageStat[]
  quotaConfigs  QuotaConfig[]
  quotaUsage    QuotaUsage[]
  userQuotaUsage UserQuotaUsage[]
  edgeNodeGroups EdgeNodeGroup[]
  deploymentModes DeploymentMode[]
  systemMetrics SystemMetric[]
  alertRules    AlertRule[]
  inviteLinks   InviteLink[]
  modelConfigurations ModelConfiguration[]
  modelFailoverLogs ModelFailoverLog[]
  modelPerformanceMetrics ModelPerformanceMetric[]
  poolBindings  GroupPoolBinding[]  // 账号池绑定关系
  enhancedUsageStats EnhancedUsageStat[]  // 增强使用统计

  @@index([createdById], map: "groups_createdById_fkey")
  @@index([departmentId])
  @@map("groups")
}

model GroupMember {
  id       String   @id @default(cuid())
  groupId  String
  userId   String
  role     String   @default("member")
  status   String   @default("active")
  joinedAt DateTime @default(now())
  group    Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([groupId, userId])
  @@index([userId], map: "group_members_userId_fkey")
  @@map("group_members")
}

model GroupAiService {
  id            String    @id @default(cuid())
  groupId       String
  aiServiceId   String    // 现在直接使用服务名称作为标识
  accountId     String?   // 绑定的AI服务账户ID
  isEnabled     Boolean   @default(true)
  quota         Json?
  authConfig    Json?     // 保留向后兼容
  proxySettings Json?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  group         Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  account       AiServiceAccount? @relation(fields: [accountId], references: [id], onDelete: SetNull)

  @@unique([groupId, aiServiceId])
  @@index([accountId])
  @@map("group_ai_services")
}

model Invitation {
  id        String   @id @default(cuid())
  token     String   @unique
  email     String
  groupId   String
  inviterId String
  status    String   @default("pending")
  expiresAt DateTime
  createdAt DateTime @default(now())
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  inviter   User     @relation(fields: [inviterId], references: [id], onDelete: Cascade)

  @@index([groupId], map: "invitations_groupId_fkey")
  @@index([inviterId], map: "invitations_inviterId_fkey")
  @@map("invitations")
}

model ApiKey {
  id          String    @id @default(cuid())
  key         String    @unique
  name        String
  description String?
  groupId     String
  userId      String
  aiServiceId String    // 现在直接使用服务名称
  quotaLimit  BigInt?
  quotaUsed   BigInt    @default(0)
  status      String    @default("active")
  expiresAt   DateTime?
  lastUsedAt  DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  group       Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([groupId], map: "api_keys_groupId_fkey")
  @@index([userId], map: "api_keys_userId_fkey")
  @@map("api_keys")
}

model ProxyResource {
  id           String         @id @default(cuid())
  type         String
  host         String
  port         Int
  username     String?
  password     String?
  location     String?
  provider     String?
  status       String         @default("active")
  lastChecked  DateTime?
  responseTime Int?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  bindings     ProxyBinding[]

  @@map("proxy_resources")
}

model ProxyBinding {
  id              String        @id @default(cuid())
  groupId         String
  proxyResourceId String
  aiServiceId     String?
  priority        Int           @default(1)
  isEnabled       Boolean       @default(true)
  createdAt       DateTime      @default(now())
  group           Group         @relation(fields: [groupId], references: [id], onDelete: Cascade)
  proxyResource   ProxyResource @relation(fields: [proxyResourceId], references: [id], onDelete: Cascade)

  @@unique([groupId, proxyResourceId])
  @@index([proxyResourceId], map: "proxy_bindings_proxyResourceId_fkey")
  @@map("proxy_bindings")
}

model UsageStat {
  id           String    @id @default(cuid())
  userId       String
  groupId      String
  aiServiceId  String    // 现在直接使用服务名称
  requestType  String
  tokenCount   BigInt
  cost         Decimal   @db.Decimal(10, 6)
  requestTime  DateTime
  responseTime Int?
  status       String
  errorCode    String?
  metadata     Json?
  group        Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, requestTime])
  @@index([groupId, requestTime])
  @@index([aiServiceId, requestTime])
  @@map("usage_stats")
}

model EmailLog {
  id        String   @id @default(cuid())
  to        String
  subject   String
  type      String   // invitation, welcome, alert
  status    String   @default("pending")
  attempts  Int      @default(0)
  sentAt    DateTime?
  error     String?
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("email_logs")
}

model QuotaConfig {
  id                    String  @id @default(cuid())
  groupId               String
  aiServiceId           String  // 现在直接使用服务名称
  dailyTokenLimit       BigInt  @default(100000)
  monthlyTokenLimit     BigInt  @default(3000000)
  dailyCostLimit        Decimal @default(10.0) @db.Decimal(10, 2)
  monthlyCostLimit      Decimal @default(300.0) @db.Decimal(10, 2)
  warningThreshold      Int     @default(80)
  userDailyTokenLimit   BigInt?
  userMonthlyTokenLimit BigInt?
  resetTime             String  @default("00:00")
  timezone              String  @default("Asia/Shanghai")
  isEnabled             Boolean @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  group                 Group   @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([groupId, aiServiceId])
  @@map("quota_configs")
}

model QuotaUsage {
  id            String   @id @default(cuid())
  groupId       String
  aiServiceId   String   // 现在直接使用服务名称
  dateKey       String   // YYYY-MM-DD
  monthKey      String   // YYYY-MM
  dailyTokens   BigInt   @default(0)
  monthlyTokens BigInt   @default(0)
  dailyCost     Decimal  @default(0) @db.Decimal(10, 4)
  monthlyCost   Decimal  @default(0) @db.Decimal(10, 4)
  lastResetDate DateTime @default(now())
  warningsSent  Json?    // 存储已发送的警告状态
  updatedAt     DateTime @updatedAt
  group         Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([groupId, aiServiceId])
  @@index([dateKey])
  @@index([monthKey])
  @@map("quota_usage")
}

model UserQuotaUsage {
  id            String   @id @default(cuid())
  userId        String
  groupId       String
  aiServiceId   String   // 现在直接使用服务名称
  dateKey       String   // YYYY-MM-DD
  monthKey      String   // YYYY-MM
  dailyTokens   BigInt   @default(0)
  monthlyTokens BigInt   @default(0)
  dailyCost     Decimal  @default(0) @db.Decimal(10, 4)
  monthlyCost   Decimal  @default(0) @db.Decimal(10, 4)
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  group         Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId, aiServiceId])
  @@index([dateKey])
  @@index([monthKey])
  @@map("user_quota_usage")
}

// AI服务账户表
model AiServiceAccount {
  id            String  @id @default(cuid())
  groupId       String
  serviceType   String  // 'claude', 'gemini', 'ampcode', 'kimi', 'zhipu', 'qwen'
  name          String
  description   String?
  accountType   String  @default("shared") // 'shared', 'dedicated'
  
  // 认证配置
  authType      String  // 'oauth', 'api_key'
  encryptedCredentials String // JSON格式的加密凭证
  
  // OAuth特有字段
  oauthAccessToken   String?
  oauthRefreshToken  String?
  oauthExpiresAt     DateTime?
  oauthScopes        String?
  
  // 代理配置
  proxyType     String? // 'socks5', 'http', 'https'
  proxyHost     String?
  proxyPort     Int?
  proxyUsername String?
  proxyPassword String?
  
  // Gemini特有
  projectId     String?
  
  // 企业级功能扩展
  modelId         String?  // 具体模型标识，如 "claude-4-sonnet"
  modelVersion    String?  // 模型版本
  supportedFeatures Json?  // 支持的功能列表
  failoverPriority Int     @default(1) // 故障转移优先级
  
  // 状态信息
  status        String  @default("active") // 'active', 'inactive', 'error'
  isEnabled     Boolean @default(true)
  lastUsedAt    DateTime?
  errorMessage  String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  group         Group   @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupAiServices GroupAiService[]
  poolBindings  AccountPoolBinding[]  // 账号池绑定关系
  enhancedUsageStats EnhancedUsageStat[]  // 增强使用统计
  
  @@unique([groupId, name])
  @@index([groupId, serviceType])
  @@map("ai_service_accounts")
}





// 分布式边缘节点表
model EdgeNode {
  id              String  @id @default(cuid())
  nodeId          String  @unique // 节点唯一标识
  nodeName        String
  location        String  // 地理位置
  endpoint        String  // 节点访问端点
  publicKey       String  // 节点公钥用于认证
  status          String  @default("active") // active, inactive, maintenance
  capabilities    Json    // 节点能力 CPU/内存/网络
  currentLoad     Json    // 当前负载情况
  healthScore     Int     @default(100)
  lastHeartbeat   DateTime?
  version         String  @default("1.0.0")
  metadata        Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  groupBindings   EdgeNodeGroup[]
  serviceRoutes   EdgeServiceRoute[]
  metrics         EdgeNodeMetric[]

  @@map("edge_nodes")
}

// 边缘节点组关联表
model EdgeNodeGroup {
  id         String   @id @default(cuid())
  nodeId     String
  groupId    String
  priority   Int      @default(1)
  isEnabled  Boolean  @default(true)
  config     Json?    // 节点专属配置
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  node       EdgeNode @relation(fields: [nodeId], references: [id], onDelete: Cascade)
  group      Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([nodeId, groupId])
  @@map("edge_node_groups")
}

// 边缘服务路由表
model EdgeServiceRoute {
  id          String   @id @default(cuid())
  nodeId      String
  aiServiceId String   // 现在直接使用服务名称
  routeConfig Json     // 路由配置
  isEnabled   Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  node        EdgeNode @relation(fields: [nodeId], references: [id], onDelete: Cascade)

  @@unique([nodeId, aiServiceId])
  @@map("edge_service_routes")
}

// 边缘节点监控指标表
model EdgeNodeMetric {
  id           String   @id @default(cuid())
  nodeId       String
  metricType   String   // cpu, memory, network, requests
  value        Decimal  @db.Decimal(15, 4)
  unit         String   // percent, bytes, rps等
  timestamp    DateTime @default(now())
  metadata     Json?
  node         EdgeNode @relation(fields: [nodeId], references: [id], onDelete: Cascade)

  @@index([nodeId, metricType, timestamp])
  @@map("edge_node_metrics")
}


// 部署模式配置表
model DeploymentMode {
  id          String  @id @default(cuid())
  groupId     String
  mode        String  // centralized, distributed, hybrid
  config      Json    // 模式特定配置
  isActive    Boolean @default(false)
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  group       Group   @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([groupId, mode])
  @@map("deployment_modes")
}

// 系统监控指标表
model SystemMetric {
  id         String   @id @default(cuid())
  groupId    String?
  component  String   // api, database, proxy, edge_node
  metricName String   // response_time, error_rate, throughput
  value      Decimal  @db.Decimal(15, 4)
  unit       String
  tags       Json?    // 标签用于分组和过滤
  timestamp  DateTime @default(now())
  group      Group?   @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@index([component, metricName, timestamp])
  @@index([groupId, timestamp])
  @@map("system_metrics")
}

// 告警规则表
model AlertRule {
  id          String  @id @default(cuid())
  groupId     String?
  ruleName    String
  description String?
  condition   Json    // 告警条件
  severity    String  @default("warning") // info, warning, error, critical
  isEnabled   Boolean @default(true)
  cooldown    Int     @default(300) // 冷却时间(秒)
  actions     Json    // 告警动作配置
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  group       Group?  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  incidents   AlertIncident[]

  @@map("alert_rules")
}

// 告警事件表
model AlertIncident {
  id          String   @id @default(cuid())
  ruleId      String
  status      String   @default("active") // active, resolved, suppressed
  severity    String
  title       String
  description String
  metadata    Json?
  startTime   DateTime @default(now())
  endTime     DateTime?
  resolvedBy  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  rule        AlertRule @relation(fields: [ruleId], references: [id], onDelete: Cascade)

  @@index([status, startTime])
  @@map("alert_incidents")
}

// 邀请链接表
model InviteLink {
  id        String   @id @default(cuid())
  token     String   @unique
  name      String
  groupId   String
  creatorId String
  maxUses   Int      @default(10)
  usedCount Int      @default(0)
  status    String   @default("active") // active, inactive, expired
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  creator   User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  @@index([groupId], map: "invite_links_groupId_fkey")
  @@index([creatorId], map: "invite_links_creatorId_fkey")
  @@map("invite_links")
}

// 多模型配置表
model ModelConfiguration {
  id                    String  @id @default(cuid())
  groupId               String
  serviceType           String  @default("claude_code") // claude_code, gemini, ampcode
  primaryModel          String  @default("claude-4-sonnet")
  fallbackModels        Json    // 备用模型列表，按优先级排序
  failoverTrigger       String  @default("automatic") // manual, automatic, hybrid
  healthCheckThreshold  Int     @default(80)
  failbackEnabled       Boolean @default(true)
  strategy              String  @default("priority") // priority, round_robin, least_used
  maxRetries            Int     @default(3)
  timeout               Int     @default(30000)
  healthCheckInterval   Int     @default(60000)
  isEnabled             Boolean @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  group                 Group   @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([groupId, serviceType])
  @@map("model_configurations")
}

// 模型故障转移日志表
model ModelFailoverLog {
  id           String   @id @default(cuid())
  groupId      String
  fromModel    String
  toModel      String
  reason       String   // automatic_failover, manual_switch, maintenance
  success      Boolean
  responseTime Int?
  errorMsg     String?
  timestamp    DateTime @default(now())
  metadata     Json?
  group        Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@index([groupId, timestamp])
  @@index([fromModel, toModel])
  @@map("model_failover_logs")
}

// 模型性能指标表
model ModelPerformanceMetric {
  id           String   @id @default(cuid())
  groupId      String
  modelId      String   // claude-4-sonnet, kimi-k2等
  metricType   String   // response_time, success_rate, error_rate, health_score
  value        Decimal  @db.Decimal(15, 4)
  unit         String   // ms, percent等
  windowStart  DateTime // 时间窗口开始
  windowEnd    DateTime // 时间窗口结束
  sampleCount  Int      @default(1)
  tags         Json?    // 额外的标签信息
  createdAt    DateTime @default(now())
  group        Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@index([groupId, modelId, metricType, windowStart])
  @@index([windowStart, windowEnd])
  @@map("model_performance_metrics")
}

// ==================== 企业级功能数据表 ====================

// 企业组织表
model Enterprise {
  id          String   @id @default(cuid())
  name        String
  planType    String   @default("basic") // "basic", "enterprise", "custom"
  settings    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // 关联关系
  accountPools AccountPool[]
  departments  Department[]
  
  @@map("enterprises")
}

// 部门表 (支持层级结构)
model Department {
  id           String   @id @default(cuid())
  enterpriseId String
  parentId     String?  // 支持层级结构
  name         String
  description  String?
  budgetLimit  Decimal? @db.Decimal(10, 2)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // 关联关系
  enterprise   Enterprise   @relation(fields: [enterpriseId], references: [id], onDelete: Cascade)
  parent       Department?  @relation("DepartmentHierarchy", fields: [parentId], references: [id])
  children     Department[] @relation("DepartmentHierarchy") 
  groups       Group[]      @relation("DepartmentGroups")
  
  @@index([enterpriseId])
  @@map("departments")
}

// 账号池表
model AccountPool {
  id                  String   @id @default(cuid())
  enterpriseId        String
  name                String
  description         String?
  poolType            String   @default("shared") // "shared", "dedicated"
  loadBalanceStrategy String   @default("round_robin") // "round_robin", "least_connections", "weighted"
  maxLoadPerAccount   Int      @default(80)
  priority            Int      @default(1)
  isActive            Boolean  @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  // 关联关系
  enterprise       Enterprise           @relation(fields: [enterpriseId], references: [id], onDelete: Cascade)
  accountBindings  AccountPoolBinding[]
  groupBindings    GroupPoolBinding[]
  enhancedUsageStats EnhancedUsageStat[]
  
  @@index([enterpriseId])
  @@map("account_pools")
}

// 账号池与AI账号绑定表
model AccountPoolBinding {
  id                String   @id @default(cuid())
  poolId            String
  accountId         String
  weight            Int      @default(1)
  maxLoadPercentage Int      @default(80)
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  
  // 关联关系
  pool    AccountPool      @relation(fields: [poolId], references: [id], onDelete: Cascade)
  account AiServiceAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)
  
  @@unique([poolId, accountId])
  @@index([accountId])
  @@map("account_pool_bindings")
}

// 拼车组与账号池绑定表
model GroupPoolBinding {
  id                String   @id @default(cuid())
  groupId           String
  poolId            String
  bindingType       String   @default("shared") // "primary", "fallback", "shared"
  usageLimitHourly  Int      @default(0) // 0表示无限制
  usageLimitDaily   Int      @default(0)
  usageLimitMonthly Int      @default(0)
  priority          Int      @default(1)
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // 关联关系
  group Group       @relation(fields: [groupId], references: [id], onDelete: Cascade)
  pool  AccountPool @relation(fields: [poolId], references: [id], onDelete: Cascade)
  
  @@unique([groupId, poolId])
  @@index([poolId])
  @@map("group_pool_bindings")
}

// 增强使用记录表以支持账号池统计
model EnhancedUsageStat {
  id            String    @id @default(cuid())
  userId        String
  groupId       String
  accountId     String?   // 实际使用的账号ID
  poolId        String?   // 账号所属池ID
  aiServiceId   String    // 服务类型
  requestType   String
  requestTokens Int       @default(0)
  responseTokens Int      @default(0)
  totalTokens   BigInt
  cost          Decimal   @db.Decimal(10, 6)
  requestTime   DateTime
  responseTime  Int?
  status        String
  errorCode     String?
  metadata      Json?
  
  // 关联关系
  user    User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  group   Group            @relation(fields: [groupId], references: [id], onDelete: Cascade)
  account AiServiceAccount? @relation(fields: [accountId], references: [id], onDelete: SetNull)
  pool    AccountPool?     @relation(fields: [poolId], references: [id], onDelete: SetNull)
  
  @@index([userId, requestTime])
  @@index([groupId, requestTime])
  @@index([accountId, requestTime])
  @@index([poolId, requestTime])
  @@map("enhanced_usage_stats")
}

// 预算分配表
model BudgetAllocation {
  id           String   @id @default(cuid())
  entityType   String   // "enterprise", "department", "group"
  entityId     String   // 对应的实体ID
  budgetPeriod String   @default("monthly") // "monthly", "quarterly", "yearly"
  budgetAmount Decimal  @db.Decimal(10, 2)
  usedAmount   Decimal  @default(0) @db.Decimal(10, 2)
  periodStart  DateTime
  periodEnd    DateTime
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@index([entityType, entityId])
  @@index([budgetPeriod, periodStart])
  @@map("budget_allocations")
}

// ==================== 权限管理数据表 ====================

// 用户企业角色表
model UserEnterpriseRole {
  id           String   @id @default(cuid())
  userId       String
  enterpriseId String?  // 如果为null表示全局角色
  roleId       String
  scope        String   @default("enterprise") // "global", "enterprise", "department", "group"
  resourceId   String?  // 具体资源ID，如部门ID或组ID
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // 关联关系  
  role       EnterpriseRole @relation(fields: [roleId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([enterpriseId])
  @@index([roleId])
  @@map("user_enterprise_roles")
}

// 企业角色表
model EnterpriseRole {
  id           String   @id @default(cuid())
  name         String
  displayName  String
  description  String?
  isBuiltIn    Boolean  @default(false) // 是否为内置角色
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // 关联关系
  userRoles    UserEnterpriseRole[]
  permissions  RolePermission[]
  
  @@unique([name])
  @@map("enterprise_roles")
}

// 角色权限关联表
model RolePermission {
  id         String   @id @default(cuid())
  roleId     String
  permission String   // 权限标识符，如 "enterprise:read", "group:create"
  createdAt  DateTime @default(now())
  
  // 关联关系
  role EnterpriseRole @relation(fields: [roleId], references: [id], onDelete: Cascade)
  
  @@unique([roleId, permission])
  @@map("role_permissions")
}
